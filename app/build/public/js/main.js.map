{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/dbhelper.js","js/main.js","node_modules/idb/lib/idb.js"],"names":[],"mappings":"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":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import idb from 'idb';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\n\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    }\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DBHelper;","import DBHelper from './dbhelper';\r\n\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  setEventListeners();\r\n});\r\n\r\nvar setEventListeners = () => {\r\n  var neighborHoodSelect = document.getElementById('neighborhoods-select');\r\n  neighborHoodSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n\r\n  var cuisineSelect = document.getElementById('cuisines-select');\r\n  cuisineSelect.addEventListener('change', function () {\r\n    updateRestaurants();\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nvar fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  console.log(neighborhoods);\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nvar fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('li');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  markers.forEach(m => m.setMap(null));\r\n  markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  let tabIndex = 3;\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant, tabIndex));\r\n    tabIndex++;\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant, tabIndex) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.tabIndex = 0;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = '';\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('tabIndex', tabIndex.toString());\r\n  more.setAttribute('aria-label', 'Details for' + restaurant.name);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    markers.push(marker);\r\n  });\r\n}\r\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}